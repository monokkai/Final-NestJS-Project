 ✔ Добавить в сервис reviews-service логику и обработку маршрутов на @Get и @Post если надо. @done(25-04-12 19:57)
 *От сервиса требуется что бы он ...*

 ✔ chat-service должен обращаться к контроллеру products и возвращать список товаров с этим словом. @started(25-01-27 21:19) @done(25-01-31 21:13) @lasted(3d23h54m18s)
 *Приходит пустой массив [], значит chat-service работает неправильно!*

 ✔ AGW - это замена для NGINX что бы контролировать запросы и отправляться к каждому сервису в виде продавца. @started(25-01-27 21:19) @done(25-02-03 18:30) @lasted(6d21h11m48s)
 *В процессе, тк еще не отправляет корректные запросы*

 ✔ Сделать JWT токены при авторизации через Security @started(25-01-27 21:19) @done(25-04-12 19:57) @lasted(10w4d22h38m39s)

 ✔ С помощью прошлого проекта на NodeJS сделать так, что бы с AGW шел запрос на Security -> Users. @done(25-04-12 19:57)
 *И обратно, так же при входе в аккаунт, так же данные летят по тому же пути и возвращаются обработанными в AGW*

 ✔ Сделать и ограничить пользователей через CASL @done(25-04-12 20:01)

 ✔ Сделать кэширование для всех сервисов @done(25-01-31 21:14)
 
 ✔ Сделать пользователей @done(25-01-27 21:15)
 ✔ Сделать продукты @done(25-01-27 21:15)
 ✔ Сделать заказы (но там зависимость от chat-service, который пока что отправляет пустой массив []) @done(25-01-27 21:15)
 ✔ Faker для продуктов и пользователей @done(25-01-29 18:38)
 ✔ Сделать AGW для products и users @done(25-01-29 19:33)
 ✔ Сделать AGW на orders что бы шел запрос от чата @started(25-02-05 16:34) @done(25-02-05 16:34) @lasted(35s)
 ✔ Переписать Backend на Axios @started(25-02-05 16:34) @done(25-04-12 19:57) @lasted(9w3d3h23m45s)
 ✔ Сделал class-validator @done(25-02-03 21:09)
 ✔ Сделал Swagger-документацию по проекту @done(25-02-05 16:02)
 ✔ Сделать .MD документацию проекта по всем методам и путям в твоем проекте и так далее. @started(25-02-05 16:34) @done(25-02-05 16:34) @lasted(16s)
 
