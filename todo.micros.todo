✔ Задача #1: @done(25-04-12 19:56)
Реализуйте защиту маршрута на добавление товара в БД соответствующего сервиса.
Добавлять товар может только менеджер или оператор.
Чтобы понять, что запрос отправил менеджер или оператор, нам опять таки придется ходит в сервис пользователей.
Его придется переработать. У пользователя еще появится поле "Роль", из которого уже и будет пониматься его уровень доступа.
Соответственно, ваш защитник должен будет получить в теле запроса идентификатор пользователя, узнать его роль и на основании этого принять решение.
Если у пользователя недостаточно прав, верните ему соответствующий статус ответа, если с правами пользователя все в пордке, товар может быть добавлен в базу данных.

✔ Задача #2: @done(25-04-12 19:56)
Доработка сервиса корзины.
Задача. Улучшение модели корзины.
• Дополните схему корзины так, чтобы она хранила не только список товаров, но и дополнительные данные, такие как количество товара, цена на момент добавления в корзину, а также возможные скидки.
• Реализуйте метод обновления корзины: пользователь может изменять количество товара или удалять его из корзины.

✔ Задача #3: @done(25-04-12 19:56)
CASL.
Задача.
Дорабатывайте задачу с практики с одной корректировкой.
Проверки ролей должны осуществляться в Guard.
Требуется реализовать систему комментариев с распределением прав доступа на основе ролей пользователя.
Требования:
• Гость может только читать комментарии.
• Зарегистрированный пользователь может читать и писать комментарии.
• Модератор может читать и редактировать комментарии.
• Админ может выполнять все действия: читать, писать, редактировать и удалять комментарии.
Шаги для решения:
1. Модели данных
export class Comment {
id: number; text: string;
authorId: number; // Идентификатор автора комментария
}
export class User {
id: number;
role: 'guest' | 'user' | 'moderator' | 'admin';

2. Определение действий
Определим действия, которые пользователи могут выполнять с комментариями:
export enum Action {
// Полное управление (чтение, создание, обновление, удаление)
Manage = 'manage',
Create = 'create'
, // Создание нового комментария
Read = ' read'
// Чтение комментария
Update = 'update'
, / Обновление комментария
Delete = 'delete'
, // Удаление комментария
3. Реализация AbilityFactory для управления доступом
Создайте класс AbilityFactory, который будет определять права на действия в зависимости от роли пользователя.
4. Контроллер для работы с комментариями
Создадим контроллер, который будет
комментариями
обрабатывать запросы для работы
5. Тестирование в Postman
Протестируйте сервис под разными пользователями.

✔ Задача #4: @done(25-04-12 19:56)
Внедрение CASL в API Gateway.
Задача.
Доработайте задание с практики и в качестве сдачи домашнего задание отправьте скриншоты тестирования запросов на регистрацию и авторизацию в Postman.
При авторизации, в зависимости от настроек, вы будете получать токен, сохряняя его в заголовках или обмениваться им в теле.
Скриншоты также должны включать тестирование части API, где вы продемонстрируете запросы каждой роли.
Преподаватель должен видеть, что гость может читать отзывы, но не может, к примеру делать POST запросы на их создание.
При ошибках авторизации возвращайте верную ошибку.